#!/bin/bash
#
# Full path to FTP root directory on filesystem and destination URL
#
FTPROOT=/ftp/pub/GNOME
URLROOT=http://download.gnome.org


#
# Initialise status variables
#
UNATTENDED=
KEEP=
SAMEVERSION=


#
# How to use install-module
#
usage() {
	echo "Usage: install-module [OPTION] TARBALL
Install new tarball to GNOME FTP master and mirrors.
Example: install-module -k metacity-2.4.1.tar.gz

Parameters:
  -h, --help          display this help and exit
  -k, --keep          do not delete the original tarball.
  -u, --unattended    do not prompt for confirmation. NOTE: An unattended
                      install will not provide any extra information to help
                      you avoid an invalid (and potentially messy) installation.
                      It is recommended that you do not use this unless you
                      are *very* sure.

Report bugs to <gnome-sysadmin@gnome.org>"
}


#
# Process parameters
#
while [ "$1" ]; do
	case "$1" in
		--help|-h)
			usage
			exit
		;;
		--keep|-k)
			KEEP=1
			shift
		;;
		--unattended|-u)
			UNATTENDED=1
			shift
		;;
		*.tar.gz|*.tar.bz2)
			TARBALL="$1"
			shift
		;;
	esac
done


# Check tarball validity
if [ ! -f "$TARBALL" ]; then
	echo "$TARBALL DOES NOT EXIST!"
	echo
	usage
	exit 1
fi


#
# Pull out required information from tarball name
# and set up other variables for the script
#
FORMAT=$(echo $TARBALL | sed "s/.*\.\(tar.*\)/\1/")
FILENAME=$(basename $TARBALL .$FORMAT)
MODULE=$(echo $FILENAME | sed "s#\([A-Za-z0-9\_\+\-]*\)-[[:digit:]].*#\1#")
VERSION=$(echo $FILENAME | sed "s#$MODULE-\(.*\)#\1#i")
MAJMIN=$(echo $VERSION | sed "s#\([[:digit:]]\+\.[[:digit:]]\+\).*#\1#")
LOCATION=$FTPROOT/sources/$MODULE/$MAJMIN
URL="$URLROOT/sources/$MODULE/$MAJMIN/$FILENAME"
WHO="$(getent passwd $USER | cut -d : -f 5 | cut -d , -f 1 | sed 's, <.*,,')"
if [ -z "$WHO" ]; then
	WHO="$USER"
else
	WHO="$WHO"
fi


#
# Prompt for confirmation and check for common installation errors
#
if [ -z $UNATTENDED ]; then
	echo "      Module: $MODULE"
	echo "     Version: $VERSION"
	echo "     Maj.Min: $MAJMIN"
	echo " Destination: $LOCATION/"

	# Does the module directory exist? If not, show warning.
	if [ -d $FTPROOT/sources/$MODULE ]; then : ; else
		echo
		echo "  WARNING: $MODULE is not present in the archive!"
		echo "           Are you sure that it is new and/or the correct module name?"
	fi

	# Does the tarball version exist? If so, show warning.
	if [ -f $LOCATION/$FILENAME.$FORMAT ]; then
		SAMEVERSION=1
		echo
		echo "  WARNING: $FILENAME.$FORMAT already exists in the archive!"
		echo "           Are you sure that you want to replace it? This is generally"
		echo "           not a good idea."
	fi
	
	echo
	echo -n "Install $MODULE? [Y/n] "
	read CONTINUE
	# Continue if empty or response starts with y -> cute, huh?
	if [ -z $CONTINUE ] || echo $CONTINUE | grep -qi ^y; then : ; else
		echo
		echo "Module installation cancelled. Please report any problems with this"
		echo "script to gnome-sysadmin@gnome.org. Thanks."
		exit
	fi
	echo
fi


#
# Set the umask for the duration of this script
#
umask 0002


# Create destination directory and copy tarball
# If we can't create the directory, bomb out!
if mkdir -p $LOCATION/; then : ; else
	echo "FATAL: Could not create module directory!"
	exit 1
fi
if cp -f $TARBALL $LOCATION/ ; then : ; else
	echo "FATAL: Could not copy the tarball!"
	exit 1
fi
# Just in case the original file wasn't group writable
chmod ug+w,a+r $LOCATION/$FILENAME.$FORMAT


#
# Create alternate format destination tarball
#
case $FORMAT in
	tar.gz)
		echo "Creating bzip2 archive..."
		gunzip -dc $TARBALL | bzip2 > $LOCATION/$FILENAME.tar.bz2
	;;
	tar.bz2)
		echo "Creating gzip archive..."
		bunzip2 -dc $TARBALL | gzip > $LOCATION/$FILENAME.tar.gz
	;;
	*)
		echo "What on earth is this format?"
		echo "FATAL: This should have been checked earlier or something!"
		exit 1
	;;
esac


#
# Generate diff, news and changes files
#
# diff against LATEST-IS-* unless the file doesn't exist and we haven't
# set the SAMEVERSION
if [ -L $LOCATION/LATEST-IS-* ] && [ -z $SAMEVERSION ]; then
	OLDVERSION=$(basename $LOCATION/LATEST-IS-* | sed "s#LATEST-IS-\(.*\)#\1#")
	OLDTARBALL=$MODULE-$OLDVERSION.tar.gz
	echo "Creating diff between $MODULE $OLDVERSION and $VERSION..."
	
	# Create a fairly unique temp directory from module/version/pid
	TEMPDIR=/tmp/$MODULE-$VERSION-$$
	mkdir -p $TEMPDIR
	cd $TEMPDIR

	# Unpack the tarballs
	tar xzf $LOCATION/$OLDTARBALL
	tar xzf $LOCATION/$FILENAME.tar.gz

	# Generate diff file, ignoring translations
	diff -Nru -x *.gmo -x *.mo --speed-large-files --minimal $MODULE-$OLDVERSION $MODULE-$VERSION > diff
	# If there are binary differences, skip this process
	if grep -q "^Binary files" diff; then
		echo "Binary files differ, discarding diff file..."
	else
		DIFFFILE=$MODULE-$OLDVERSION-$VERSION.diff.gz
		gzip -9 diff
		mv -f diff.gz $LOCATION/$DIFFFILE
	fi

	# Generate NEWS diff
	diff -U 0 $MODULE-$OLDVERSION/NEWS $MODULE-$VERSION/NEWS | \
		sed '1,/^@@/d;/^@@/,$d;/^[^+]/d;s/^+//;${/^$/d}' > news 2> /dev/null
	# if there's no useful diff, skip this process
	if [ -f news ] && [ -s news ] && [ $(wc -l < news) -gt 2 ]; then
		NEWSFILE=$MODULE-$VERSION.news
		mv -f news $LOCATION/$NEWSFILE
	fi

	# Generate ChangeLog diff
	diff -U 0 $MODULE-$OLDVERSION/ChangeLog $MODULE-$VERSION/ChangeLog | \
		sed '1,/^@@/d;/^@@/,$d;/^[^+]/d;s/^+//;${/^$/d}' > changes 2> /dev/null
	# if there's no useful diff, skip this process
	if [ -f changes ] && [ -s changes ] && [ $(wc -l < changes) -gt 2 ]; then
		CHANGESFILE=$MODULE-$VERSION.changes
		mv -f changes $LOCATION/$CHANGESFILE
	fi
	
	cd -
	rm -rf $TEMPDIR
fi


#
# Clean up and md5sum release
#
echo "Checksumming and fixing permissions..."
MD5SUMFILE=$MODULE-$VERSION.md5sum
# Create checksum and delete LATEST-IS-* file
(cd $LOCATION;
	md5sum *$VERSION.* > $MD5SUMFILE;
	rm -f LATEST-IS-*;
	ln -s $FILENAME.tar.gz LATEST-IS-$VERSION)
# Ensure the files are group-owned by ftpadmin
chown -R :ftpadmin $LOCATION/ 2> /dev/null
# Delete the original tarball unless asked to keep it
if [ -z $KEEP ]; then
	echo "Deleting original tarball..."
	rm -f $TARBALL
fi


#
# Update LATEST files
#
echo -n "Updating LATEST files... "
# Prepend URL and current date to LATEST file
LATEST=$FTPROOT/LATEST
LATESTNEW=/tmp/LATEST.$$
(echo "$URL.tar.gz|$(date -R)"; head -n 19 $LATEST 2> /dev/null) > $LATESTNEW
cat $LATESTNEW > $LATEST
rm -f $LATESTNEW
# Regenerate the RSS file
# Print RSS Header
echo -n "<?xml version=\"1.0\"?>
<rss version=\"2.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\">
    <channel>
        <title>GNOME FTP Releases</title>
        <link>http://ftp.gnome.org/pub/GNOME/</link>
        <atom:link href=\"http://ftp.gnome.org/pub/GNOME/LATEST.xml\" rel=\"self\" type=\"application/rss+xml\" />
        <description>A list of recent files released on GNOME's FTP site</description>
        <webMaster>webmaster@gnome.org (GNOME webmaster)</webMaster>
        <lastBuildDate>$(date -R)</lastBuildDate>" > $LATEST.xml


# Add LATEST items to RSS
cat $LATEST | while read LINE; do
	LINE_URL=$(echo $LINE | cut -f 1 -d "|")
	LINE_DATE=$(echo $LINE | cut -f 2 -d "|")
	LINE_FILENAME=$(basename $LINE_URL .gz)
	LINE_MODULE=$(echo $LINE_FILENAME | sed "s#\([A-Za-z0-9\_\+\-]*\)-[[:digit:]].*.tar#\1#")
	LINE_VERSION=$(echo $LINE_FILENAME | sed "s#$LINE_MODULE-\(.*\).tar#\1#i")
	LINE_MAJMIN=$(echo $LINE_VERSION | sed "s#\([[:digit:]]\+\.[[:digit:]]\+\).*#\1#")
	
	LINE_MODULE_LOC="sources/$LINE_MODULE"
	LINE_TARBALL_LOC="$LINE_MODULE_LOC/$LINE_MAJMIN"

	LINE_NEWSFILE="$LINE_MODULE-$LINE_VERSION.news"
	LINE_CHANGESFILE="$LINE_MODULE-$LINE_VERSION.changes"

	LINE_WHO=""
	LINE_LINKS=""
	
    (echo -n "
		<item>
			<title>$LINE_MODULE $LINE_VERSION</title>
			<link>$URLROOT/$LINE_TARBALL_LOC/</link>
			<guid>$URLROOT/$LINE_TARBALL_LOC/$LINE_FILENAME.bz2</guid>
			<description><![CDATA["

	if [ -f $FTPROOT/$LINE_MODULE_LOC/$LINE_MODULE.png ]; then
		echo "<img src=\"$URLROOT/$LINE_MODULE_LOC/$LINE_MODULE.png\" align=\"right\" class=\"right\">"
	fi

	if [ -f $FTPROOT/$LINE_TARBALL_LOC/$LINE_NEWSFILE ]; then
			echo "<tt>"
			# escape all HTML as we don't expect any formatting here
			sed 's/\&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/$/<br/>/' $FTPROOT/$LINE_TARBALL_LOC/$LINE_NEWSFILE
			echo "</tt>"
		LINE_LINKS="$LINE_LINKS <a href=\"$URLROOT/$LINE_TARBALL_LOC/$LINE_NEWSFILE\">News</a>"
	fi
	
	if [ -f $FTPROOT/$LINE_TARBALL_LOC/$LINE_CHANGESFILE ]; then
		if [ ! -f $FTPROOT/$LINE_TARBALL_LOC/$LINE_NEWSFILE ]; then
			echo "<tt>"
			# escape all HTML as we don't expect any formatting here
			sed 's/\&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g;s/$/<br/>/' $FTPROOT/$LINE_TARBALL_LOC/$LINE_CHANGESFILE
			echo "</tt>"
		fi
		LINE_LINKS="$LINE_LINKS <a href=\"$URLROOT/$LINE_TARBALL_LOC/$LINE_CHANGESFILE\">ChangeLog</a>"
	fi

	LINE_LINKS="$LINE_LINKS <a href=\"$URLROOT/$LINE_TARBALL_LOC/$LINE_FILENAME.gz\">gzip</a> <a href=\"$URLROOT/$LINE_TARBALL_LOC/$LINE_FILENAME.bz2\">bzip2</a>"

	echo -n	"<p>$(echo $LINE_LINKS | sed 's/> </> \&middot; </g')</p>;
			]]></description>
			<pubDate>$LINE_DATE</pubDate>
		</item>") >> $LATEST.xml
#<!-- FIXME <dc:creator>$LINE_WHO</dc:creator> -->
done

# Print RSS footer
echo "
	</channel>
</rss>" >> $LATEST.xml

# Finished!
echo "done."


#
# Send ftp-release-list email
#
echo "Informing ftp-release-list..."
(echo "From: \"$WHO\" <install-module@window.gnome.org>";
 echo "To: FTP Releases <ftp-release-list@gnome.org>";
 echo "Subject: $MODULE $VERSION";
 echo "Reply-To: gnome-hackers@gnome.org";
 echo;
 echo "       Module: $MODULE";
 echo "      Version: $VERSION";
 echo "  Uploaded by: $WHO";
 echo;
 echo "$URL.tar.gz";
 echo "  md5sum: $(grep tar.gz$ $LOCATION/$MD5SUMFILE | cut -d ' ' -f 1)";
 echo "    size: $(du -sh $LOCATION/$FILENAME.tar.gz | cut -f 1)";
 echo;
 echo "$URL.tar.bz2";
 echo "  md5sum: $(grep tar.bz2$ $LOCATION/$MD5SUMFILE | cut -d ' ' -f 1)";
 echo "    size: $(du -sh $LOCATION/$FILENAME.tar.bz2 | cut -f 1)";
 echo;
 if [ -f $LOCATION/$NEWSFILE ]; then
	echo "News";
	echo "----";
	echo;
	cat $LOCATION/$NEWSFILE;
	echo;
 elif [ -f $LOCATION/$CHANGESFILE ]; then
	echo "ChangeLog";
	echo "---------";
	echo;
	cat $LOCATION/$CHANGESFILE;
	echo;
 fi
 echo "-- ";
 echo "An RSS 2.0 feed of ftp-release-list is available at:";
 echo "$URLROOT/LATEST.xml";) | /usr/sbin/sendmail ftp-release-list@gnome.org


#
# Trigger an update to the GNOME Library website
#
echo "Triggering GNOME Library update..."
echo forced | mail -s "UPDATE library-web" gnomeweb@www.gnome.org

#
# Signal the mirrors
#
echo
echo "Signalling mirror update process..."
if [ -f /usr/local/bin/signal-ftp-sync ]; then
	/usr/local/bin/signal-ftp-sync
	# Tell user about ftp.gnome.org
	echo
	echo "Your tarball will appear in the following location on ftp.gnome.org:"
	echo
	echo "  $(dirname $URL)/"
	echo
	echo "It is important to retain the trailing slash for compatibility with"
	echo "broken http clients, and to use http as it is less taxing on the server."
else
	echo "Mirror update failed! The sync script does not exist."
fi

#
# Add a bugzilla version
#
if [ -x /usr/bin/curl ]; then
	echo
	echo "Adding new version to bugzilla..."
	/usr/bin/curl "http://bugzilla.gnome.org/add-version.cgi?$MODULE|$VERSION"
fi
