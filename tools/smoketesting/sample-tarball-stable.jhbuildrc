# -*- mode: python -*-

# edit this file to match your settings, backup your ~/.jhbuildrc, and then
# copy this there

# what module set should be used.  The default at the moment is
# 'gnome-suites-core-3.0', but it can be any of the files in the
# modulesets directory, or even the URL of a module set file on
# a web server.
moduleset = 'gnome-apps-3.8.0'

# A list of the modules to build.  Defaults to the Gnome Desktop and
# developer platform.
modules = [ 'meta-gnome-core', 'meta-gnome-apps-tested' ]

tarballdir = os.path.join(os.environ['HOME'], 'releases', 'checkoutroot')

# what directory should the source be checked out to?
checkoutroot = os.path.join(os.environ['HOME'], 'releases', moduleset)

# the prefix to configure/install modules to (must have write access)
prefix = os.path.join(checkoutroot, 'install')
if os.path.exists('/usr/lib64'):
  libdir = os.path.join(prefix, 'lib64')
  system_libdir = '/usr/lib64'
else:
  libdir = os.path.join(prefix, 'lib')
  system_libdir = '/usr/lib'

# extra arguments to pass to all autogen.sh scripts
# to speed up builds of gnome2, try '--disable-static --disable-gtk-doc'
autogenargs='--disable-static --disable-gtk-doc'

# set CFLAGS:
os.environ['CFLAGS'] = '-g -O2'
# set only if you have more than one CPU
# might break some builds
makeargs = '-j4'


# An alternative location to look for (or download to) all downloaded tarballs
tarballdir = os.path.join(checkoutroot, 'pkgs')

# Workarounds

# these are hard to build or interfere with system packages
skip = [ ]

#Alejandro Pineiro local stuff, probably useful for others. Anyway, feel free to remove it
#addpath('PKG_CONFIG_PATH', os.path.join(os.sep, 'usr', 'lib', 'pkgconfig'))
#addpath('PKG_CONFIG_PATH', os.path.join(os.sep, 'usr', 'share', 'pkgconfig'))
#addpath('PKG_CONFIG_PATH', os.path.join(os.sep, 'usr', 'lib', 'x86_64-linux-gnu', 'pkgconfig'))
