# -*- mode: python -*-

# edit this file to match your settings, backup your ~/.jhbuildrc, and then
# copy this there

# what module set should be used.  The default at the moment is
# 'gnome-suites-core-3.0', but it can be any of the files in the
# modulesets directory, or even the URL of a module set file on
# a web server.
use_local_modulesets = True
moduleset = 'gnome-apps-3.2'

# A list of the modules to build.  Defaults to the Gnome Desktop and
# developer platform.
modules = [ 'meta-gnome-core', 'meta-gnome-apps-tested' ]

tarballdir = os.path.join(os.environ['HOME'], 'releases', 'checkoutroot')

# what directory should the source be checked out to?
checkoutroot = os.path.join(os.environ['HOME'], 'releases', moduleset)

# the prefix to configure/install modules to (must have write access)
prefix = os.path.join(checkoutroot, 'install')
if os.path.exists('/usr/lib64'):
  libdir = os.path.join(prefix, 'lib64')
else:
  libdir = os.path.join(prefix, 'lib')

# extra arguments to pass to all autogen.sh scripts
# to speed up builds of gnome2, try '--disable-static --disable-gtk-doc'
autogenargs='--disable-static --disable-gtk-doc'

# An alternative location to look for (or download to) all downloaded tarballs
tarballdir = os.path.join(checkoutroot, 'pkgs')


########## Workarounds ##########

# Totem seems to stupidly try to install its plugin under /usr even if that's
# not $PREFIX.  So, we'll disable the mozilla plugin.  Those wanting to build
# it can remove this module_autogenargs comamnd and run
#   chmod a+w /usr/lib/mozilla-1.7.12/plugins
# before the build.  When the build is finished, you can run
#   chmod a-w /usr/lib/mozilla-1.7.12/plugins
# to set things back to normal.
module_autogenargs['totem'] = autogenargs + '--disable-mozilla'

# Some modules didn't do a new release after some glib GAtomic changes
module_makeargs['gnome-shell'] = makeargs + 'CFLAGS+="-UG_DISABLE_DEPRECATED"'
module_makeargs['network-manager-applet'] = makeargs + 'CFLAGS+="-UG_DISABLE_DEPRECATED"'

# I needed to add this in order to compile in my machine
module_autogenargs['gmp'] = autogenargs + ' ABI=32'

# For those that don't have SDL installed and don't have a webcam, uncomment
# the following line to skip building ekiga

# firefox-1.5.0.6 won't build; firefox-1.5.0.7 doesn't correctly install
# ssl.h, but the firefox-devel packages (+necessary dependencies) from
# my distro work.  *shrug*
skip.append('firefox')

# we're better off using the distro packages for mozilla/firefox
skip.append('mozilla')

# do not build things that the distro can provide
skip.append('nspr')
skip.append('nss')
skip.append('pulseaudio')

# do not build cheese at the moment, as it has an unapproved dependency on mx
skip.append('libxml2')
skip.append('libxslt')

# libxml2, libxslt, and gamin are totally inconsistent with the rest of Gnome
# about python.  See
# http://mail.gnome.org/archives/garnome-list/2005-July/msg00199.html
#
# WARNING: This will probably fail if you don't do a jhbuild bootstrap
# first to make sure that jhbuild installs python-2.4 in the prefix
#
##os.environ['PYTHON'] = os.path.join(prefix, 'bin/python')
##os.environ['PYTHONPATH'] = os.path.join(libdir, 'python2.4/site-packages')

# evolution-exchange requires evolution-data-server to be configured
# with ldap enabled, which it isn't by default.  That would also
# require ldap development libraries, but I have no exchange server to
# test with anyway.  So I just skip it.
skip.append('evolution-exchange')

# jhbuild no longer automatically looks in /usr/lib/pkgconfig, so we need to
# tell it to do so
addpath('PKG_CONFIG_PATH', '/usr/lib/pkgconfig')
addpath('PKG_CONFIG_PATH', '/usr/lib64/pkgconfig')
addpath('PKG_CONFIG_PATH', '/usr/share/pkgconfig')
